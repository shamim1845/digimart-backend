{"version":3,"file":"static/js/328.1b2e8e19.chunk.js","mappings":"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","sources":["components/account/profile/UpdateProfile.jsx","components/utils/helperFunction/MediaUpload.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport styled from \"styled-components\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport MediaUpload from \"../../utils/helperFunction/MediaUpload\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Title from \"../../utils/reUseableComponents/Title\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectUserInfo } from \"../../../redux/user/userSelector\";\r\nimport { fetchAsyncUser } from \"../../../redux/user/userSlice\";\r\n\r\nconst MyProfile = () => {\r\n  const [isProfile, setIsProfile] = useState(false);\r\n  const [profilePic, setProfilePic] = useState(null);\r\n  const [btnDissable, setBtnDissable] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUserInfo);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      name: user?.name || \"\",\r\n      email: user?.email || \"\",\r\n      mobile: user?.mobile || \"\",\r\n      birthday: user?.birthday || \"\",\r\n      gender: user?.gender || \"\",\r\n    },\r\n    enableReinitialize: true,\r\n    validationSchema: yup.object({\r\n      name: yup\r\n        .string()\r\n        .required(\"Name is required.\")\r\n        .min(3, \"Name must have at least 3 characters.\"),\r\n      email: yup\r\n        .string()\r\n        .required(\"Email is required.\")\r\n        .email(\"Email must be a valid email.\"),\r\n      mobile: yup.string().max(11).required(\"Phone Number is required.\"),\r\n      birthday: yup.string().required(\"Date of birth is required.\"),\r\n      gender: yup.string().required(\"Gender  is required.\"),\r\n    }),\r\n    onSubmit: (values, { resetForm }) => {\r\n      setBtnDissable(true);\r\n      const { name, email, mobile, birthday, gender } = values;\r\n\r\n      function updateProfile(mediaUrls = []) {\r\n        const avatar = {\r\n          public_id: mediaUrls[0]?.public_id\r\n            ? mediaUrls[0]?.public_id\r\n            : user.avatar.public_id,\r\n          url: mediaUrls[0]?.secure_url\r\n            ? mediaUrls[0]?.secure_url\r\n            : user.avatar.url,\r\n        };\r\n\r\n        axios\r\n          .put(`/api/v1/profile/update`, {\r\n            name,\r\n            email,\r\n            avatar,\r\n            mobile,\r\n            birthday,\r\n            gender,\r\n          })\r\n          .then((res) => {\r\n            if (res.status === 200 && res.data.success) {\r\n              toast.success(\"Profile update Sucessfully.\");\r\n              dispatch(fetchAsyncUser());\r\n\r\n              setTimeout(() => {\r\n                navigate(\"/account/myprofile\");\r\n              }, 3000);\r\n            } else {\r\n              toast.info(res.data.message);\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            console.log(err.message);\r\n            toast.error(err.message);\r\n          });\r\n      }\r\n\r\n      if (profilePic) {\r\n        MediaUpload(profilePic, \"user\").then((res) => {\r\n          updateProfile(res);\r\n        });\r\n      } else {\r\n        updateProfile();\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <UpdateProfileContainer>\r\n      <Title\r\n        variant=\"h1\"\r\n        text=\"Update Profile\"\r\n        style={{ textAlign: \"center\", marginTop: \"2rem\" }}\r\n      />\r\n\r\n      <Content>\r\n        <UserImage onClick={() => setIsProfile(true)}>\r\n          <img src={user?.avatar?.url} alt=\"profile_picture\" />\r\n        </UserImage>\r\n        <Form onSubmit={formik.handleSubmit}>\r\n          <InputGroup>\r\n            {isProfile && (\r\n              <div>\r\n                <label htmlFor=\"profilePic\">Profile Picture</label>\r\n                <input\r\n                  type=\"file\"\r\n                  name=\"profilePic\"\r\n                  onChange={(e) => setProfilePic(e.target.files)}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <div>\r\n              <label htmlFor=\"name\"> Full Name</label>\r\n              <input\r\n                type=\"name\"\r\n                name=\"name\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.name}\r\n              />\r\n              {formik.touched.name && formik.errors.name && (\r\n                <p>\r\n                  <span>i</span> {formik.errors.name}{\" \"}\r\n                </p>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.email}\r\n              />\r\n              {formik.touched.email && formik.errors.email && (\r\n                <p>\r\n                  <span>i</span> {formik.errors.email}{\" \"}\r\n                </p>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"mobile\">Mobile</label>\r\n              <input\r\n                type=\"tel\"\r\n                name=\"mobile\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.mobile}\r\n              />\r\n              {formik.touched.mobile && formik.errors.mobile && (\r\n                <p>\r\n                  <span>i</span> {formik.errors.mobile}{\" \"}\r\n                </p>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"birthday\">Birthday</label>\r\n\r\n              <input\r\n                type=\"date\"\r\n                name=\"birthday\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.birthday}\r\n              />\r\n              {formik.touched.birthday && formik.errors.birthday && (\r\n                <p>\r\n                  <span>i</span> {formik.errors.birthday}\r\n                </p>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"gender\">Gender :</label>\r\n              <select\r\n                onChange={formik.handleChange}\r\n                value={formik.values.gender}\r\n                name=\"gender\"\r\n              >\r\n                <option value={\"\"}>Choose</option>\r\n                <option value={\"male\"}>Male</option>\r\n                <option value={\"female\"}>Female</option>\r\n              </select>\r\n              {formik.touched.gender && formik.errors.gender && (\r\n                <p>\r\n                  <span>i</span> {formik.errors.gender}{\" \"}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </InputGroup>\r\n          <Button>\r\n            <input\r\n              onClick={formik.handleSubmit}\r\n              type=\"submit\"\r\n              value=\"Update Profile\"\r\n              disabled={btnDissable}\r\n            />\r\n          </Button>\r\n        </Form>\r\n      </Content>\r\n    </UpdateProfileContainer>\r\n  );\r\n};\r\n\r\nexport default MyProfile;\r\n\r\nconst UpdateProfileContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  width: 100%;\r\n  max-width: 800px;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  border-radius: 0.5rem;\r\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\r\n  padding: 5rem;\r\n  margin: 2rem;\r\n  width: 90%;\r\n  @media screen and (max-width: 768px) {\r\n    margin: 0 5rem;\r\n  }\r\n  @media screen and (max-width: 576px) {\r\n    padding: 2rem;\r\n  }\r\n`;\r\n\r\nconst UserImage = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  margin-bottom: 2rem;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  img {\r\n    width: 13rem;\r\n    height: 13rem;\r\n    border-radius: 50%;\r\n    object-fit: cover;\r\n  }\r\n`;\r\nconst Form = styled.form`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst InputGroup = styled.div`\r\n  div {\r\n    margin: 1rem 0;\r\n    & label {\r\n      font-size: 1.3rem;\r\n      color: var(--text-secondary);\r\n    }\r\n\r\n    & input {\r\n      width: 100%;\r\n      height: 3.5rem;\r\n      padding: 0 1rem;\r\n      border: none;\r\n      outline: none;\r\n      &:focus {\r\n        box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\r\n          rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\r\n      }\r\n      &::placeholder {\r\n        padding-left: 0.5rem;\r\n        font-size: 1.3rem;\r\n      }\r\n    }\r\n    & input[type=\"file\"] {\r\n      padding: 0.5rem 0;\r\n    }\r\n\r\n    p {\r\n      font-size: 1.1rem;\r\n      span {\r\n        font-style: italic;\r\n        color: tomato;\r\n        margin: 1.3rem 0.4rem 0 0;\r\n        font-weight: 700;\r\n        font-size: 1.3rem;\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst Button = styled.div`\r\n  & input {\r\n    font-size: 1.3rem;\r\n    border: none;\r\n    background-color: var(--bg-primary);\r\n    padding: 1rem 2rem;\r\n    border-radius: 5px;\r\n    margin-bottom: 1rem;\r\n    cursor: pointer;\r\n    transition: all 0.5s;\r\n    &:hover {\r\n      color: #fff;\r\n      background-color: #ff6347f6;\r\n    }\r\n  }\r\n`;\r\n","import axios from \"axios\";\r\n\r\nconst MediaUpload = async (files, folder) => {\r\n  // Convert files Object to Array\r\n  const filesArr = [];\r\n  for (let key = 0; key < files.length; key++) {\r\n    filesArr.push(files[key]);\r\n  }\r\n\r\n  // Convert all files in base 64\r\n  const reader_files = filesArr.map((file) => {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = (res) => {\r\n          const public_id = file.name.split(\".\")[0];\r\n\r\n          resolve({\r\n            base64: res.target.result,\r\n            options: {\r\n              public_id: public_id,\r\n              tags: [public_id],\r\n            },\r\n          });\r\n        };\r\n      } catch (error) {\r\n        console.error(error);\r\n        reject(error?.message);\r\n      }\r\n    });\r\n  });\r\n\r\n  const images = await Promise.all(reader_files);\r\n\r\n  // Upload images on Cloudinary\r\n  return new Promise((resolve, reject) => {\r\n    axios\r\n      .post(\"/api/v1/media/uploadImages\", {\r\n        images,\r\n        folder,\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data.urls);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport default MediaUpload;\r\n"],"names":["useState","isProfile","setIsProfile","profilePic","setProfilePic","btnDissable","setBtnDissable","navigate","useNavigate","dispatch","useDispatch","user","useSelector","selectUserInfo","formik","useFormik","initialValues","name","email","mobile","birthday","gender","enableReinitialize","validationSchema","yup","required","min","max","onSubmit","values","resetForm","updateProfile","mediaUrls","avatar","public_id","url","secure_url","axios","then","res","status","data","success","toast","fetchAsyncUser","setTimeout","message","catch","err","console","log","MediaUpload","UpdateProfileContainer","variant","text","style","textAlign","marginTop","Content","UserImage","onClick","src","alt","Form","handleSubmit","InputGroup","htmlFor","type","onChange","e","target","files","handleChange","value","touched","errors","Button","disabled","styled","folder","filesArr","key","length","push","reader_files","map","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","split","base64","result","options","tags","error","all","images","urls"],"sourceRoot":""}