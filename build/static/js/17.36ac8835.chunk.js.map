{"version":3,"file":"static/js/17.36ac8835.chunk.js","mappings":"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","sources":["components/admin/routes/products/CreateProduct.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport TextInput from \"../../../utils/formik/TextInput\";\r\nimport { useCreateProductMutation } from \"../../../../redux/api/products/productsAPI\";\r\nimport CategorySelector from \"../../../utils/reUseableComponents/CategorySelector\";\r\nimport RichTextEditor from \"../../../utils/reUseableComponents/RichTextEditor\";\r\nimport ImageUploader from \"../../../utils/reUseableComponents/ImageUploader\";\r\nimport Title from \"../../../utils/reUseableComponents/Title\";\r\nimport MediaUpload from \"../../../utils/helperFunction/MediaUpload\";\r\nimport SelectBox from \"../../../utils/formik/SelectBox\";\r\nimport { useGetAllBrandQuery } from \"../../../../redux/api/brand/brandAPI\";\r\nimport Button from \"../../../utils/reUseableComponents/Buttons\";\r\n\r\nconst CreateProduct = () => {\r\n  // => state\r\n  const [categories, setCategories] = useState([]);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [images, setImages] = useState([]);\r\n\r\n  // Error state\r\n  const [categoriesError, setCategoriesError] = useState(null);\r\n  const [descError, setDescError] = useState(null);\r\n  const [imagesError, setImagesError] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // Create product mutation\r\n  const [createProduct, { data, isError, error, isLoading, isSuccess }] =\r\n    useCreateProductMutation();\r\n\r\n  // => Effect for show Error and Success message\r\n  useEffect(() => {\r\n    if (isError) toast.error(error?.message);\r\n    if (isSuccess) {\r\n      toast.success(data?.message);\r\n      navigate(\"/admin/products\");\r\n    }\r\n  }, [isError, isSuccess, data?.message, error?.message, navigate]);\r\n\r\n  // => Effect for handle Category, Description, and Images error\r\n  useEffect(() => {\r\n    if (categories?.length > 0) {\r\n      setCategoriesError(null);\r\n    }\r\n\r\n    if (images?.length > 0) {\r\n      setImagesError(null);\r\n    }\r\n\r\n    if (description && description.split(\" \").length < 10) {\r\n      setDescError(\"Description must have at least 10 word.\");\r\n    } else {\r\n      setDescError(null);\r\n    }\r\n  }, [categories?.length, images, description]);\r\n\r\n  // Fetch brands for brand selection\r\n  const { data: brandsdata } = useGetAllBrandQuery();\r\n\r\n  return (\r\n    <CreateProductContainer>\r\n      <Title variant=\"h2\" text=\"Create Product\" />\r\n      <Content>\r\n        <Formik\r\n          initialValues={{\r\n            name: \"\",\r\n            price: \"\",\r\n            brand: \"\",\r\n            stock: \"\",\r\n          }}\r\n          validationSchema={yup.object({\r\n            name: yup\r\n              .string()\r\n              .required(\"Product name is required.\")\r\n              .min(3, \"Product name must have at least 3 characters.\"),\r\n            price: yup\r\n              .number()\r\n              .required(\"Product price is required.\")\r\n              .max(100000, \"Maximum product price 100000\"),\r\n            brand: yup.string(),\r\n            stock: yup\r\n              .number()\r\n              .min(1, \"Product stock must be greater than or equal 1\")\r\n              .required(\"Product stock  is required.\"),\r\n          })}\r\n          onSubmit={(values, { setSubmitting }) => {\r\n            // => validation\r\n            if (!categories?.length || !description || !images?.length) {\r\n              if (!categories?.length)\r\n                setCategoriesError(\"Category is required.\");\r\n              if (!description) setDescError(\"Description is required.\");\r\n              if (!images?.length) setImagesError(\"Product image is required.\");\r\n              return;\r\n            }\r\n\r\n            if (description && description.split(\" \").length < 10) {\r\n              return setDescError(\"Description must have at least 10 word.\");\r\n            }\r\n\r\n            // => Upload images to Cloudinary\r\n            MediaUpload(images, \"products\")\r\n              .then((uploadedImages) => {\r\n                // => Images array modification for send in DB\r\n                const modiFiedImages = uploadedImages.map((img) => {\r\n                  return { public_id: img.public_id, url: img.secure_url };\r\n                });\r\n                // => Prepare product based on Schema\r\n                const product = {\r\n                  ...values,\r\n                  categories,\r\n                  description,\r\n                  images: modiFiedImages,\r\n                };\r\n                createProduct(product);\r\n              })\r\n              .catch((err) => {\r\n                setImagesError(\"There was an error while uploading images.\");\r\n              });\r\n          }}\r\n        >\r\n          <Form>\r\n            <TextInput\r\n              label=\"Name\"\r\n              name=\"name\"\r\n              type=\"text\"\r\n              placeholder=\"Enter your product name\"\r\n            />\r\n            <TextInput\r\n              label=\"Price\"\r\n              name=\"price\"\r\n              type=\"number\"\r\n              placeholder=\"Enter your product price\"\r\n            />\r\n            <SelectBox label=\"Brand\" name=\"brand\">\r\n              <option value=\"\">Choose a brand</option>\r\n              {brandsdata?.brands.map((brand) => (\r\n                <option key={brand?._id} value={brand?.name}>\r\n                  {brand?.name}\r\n                </option>\r\n              ))}\r\n            </SelectBox>\r\n            <TextInput\r\n              label=\"Stock\"\r\n              name=\"stock\"\r\n              type=\"number\"\r\n              placeholder=\"Product stock\"\r\n            />\r\n            <CategoriesContainer>\r\n              <CategorySelector\r\n                label=\"Category\"\r\n                categories={categories}\r\n                setCategories={setCategories}\r\n                categoriesError={categoriesError}\r\n                setCategoriesError={setCategoriesError}\r\n              />\r\n            </CategoriesContainer>\r\n\r\n            <DescriptionContainer>\r\n              <RichTextEditor\r\n                label=\"Description\"\r\n                richText={description}\r\n                setRichText={setDescription}\r\n                richTextError={descError}\r\n                setRichTextError={setDescError}\r\n              />\r\n            </DescriptionContainer>\r\n\r\n            <ProductImage>\r\n              <ImageUploader\r\n                label=\"Product Images\"\r\n                images={images}\r\n                setImages={setImages}\r\n                imagesError={imagesError}\r\n                setImagesError={setImagesError}\r\n              />\r\n            </ProductImage>\r\n\r\n            <br />\r\n            <Button type=\"submit\" disabled={isLoading} text=\"Submit\" />\r\n          </Form>\r\n        </Formik>\r\n      </Content>\r\n    </CreateProductContainer>\r\n  );\r\n};\r\n\r\nexport default CreateProduct;\r\n\r\nconst CreateProductContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  width: 100%;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  border-radius: 0.5rem;\r\n  box-shadow: var(--shadow-1);\r\n  padding: 5rem;\r\n  width: 100%;\r\n  @media screen and (max-width: 768px) {\r\n    /* margin: 0 5rem; */\r\n  }\r\n  @media screen and (max-width: 576px) {\r\n    /* padding: 2rem; */\r\n  }\r\n`;\r\n\r\nconst CategoriesContainer = styled.div``;\r\n\r\nconst DescriptionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n`;\r\n\r\nconst ProductImage = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n`;\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","categories","setCategories","_useState3","_useState4","description","setDescription","_useState5","_useState6","images","setImages","_useState7","_useState8","categoriesError","setCategoriesError","_useState9","_useState10","descError","setDescError","_useState11","_useState12","imagesError","setImagesError","navigate","useNavigate","_useCreateProductMuta","useCreateProductMutation","_useCreateProductMuta2","createProduct","_useCreateProductMuta3","data","isError","error","isLoading","isSuccess","useEffect","toast","message","success","length","split","brandsdata","useGetAllBrandQuery","_jsxs","CreateProductContainer","children","_jsx","Title","variant","text","Content","Formik","initialValues","name","price","brand","stock","validationSchema","yup","required","min","max","onSubmit","values","_ref","setSubmitting","MediaUpload","then","uploadedImages","modiFiedImages","map","img","public_id","url","secure_url","product","_objectSpread","catch","err","Form","TextInput","label","type","placeholder","SelectBox","value","brands","_id","CategoriesContainer","CategorySelector","DescriptionContainer","RichTextEditor","richText","setRichText","richTextError","setRichTextError","ProductImage","ImageUploader","Button","disabled","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","_templateObject5"],"sourceRoot":""}