{"version":3,"file":"static/js/154.8dd7f6df.chunk.js","mappings":"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","sources":["components/utils/customHooks/useCalculatePrice.js","components/order/OrderSummary.jsx","components/order/ShippingInfo.jsx","components/utils/customHooks/useCreateNewOrder.js","components/order/CheckoutForm.jsx","components/order/StripePayment.jsx","components/order/OrderDetails.jsx","components/order/Order.js","components/utils/formik/SelectBox.jsx","components/utils/formik/TextInput.jsx","components/utils/validationUtils/ValidationError.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useGetMyCartListQuery } from \"../../../redux/api/cart/cartAPI\";\nimport { rate } from \"../../../App\";\n\nconst useCalculatePrice = () => {\n  const [productPrice, setProductPrice] = useState(0);\n  const [shippingCost, setShippingCost] = useState(0);\n  const [tax, setTax] = useState(0);\n  const [total, setTotal] = useState(0);\n\n  // get my cart list\n  const { data } = useGetMyCartListQuery();\n\n  const orderdItems = data?.carts;\n\n  //   calculate\n  useEffect(() => {\n    const calcProductPrice = orderdItems?.reduce((acc, item) => {\n      return acc + item.product.price * item.quantity;\n    }, 0);\n\n    const calcShippingCost = Math.round(\n      calcProductPrice * (rate.shipping / 100)\n    );\n    const calcTax = Math.round(calcProductPrice * (rate.tax / 100));\n\n    setProductPrice(calcProductPrice);\n    setShippingCost(calcShippingCost);\n    setTax(calcTax);\n    setTotal(calcProductPrice + calcShippingCost + calcTax);\n  }, [orderdItems]);\n\n  return { productPrice, shippingCost, tax, total };\n};\n\nexport default useCalculatePrice;\n","import styled from \"styled-components\";\r\nimport Title from \"../utils/reUseableComponents/Title\";\r\nimport useCalculatePrice from \"../utils/customHooks/useCalculatePrice\";\r\n\r\nconst OrderSummary = () => {\r\n  const { productPrice, shippingCost, tax, total } = useCalculatePrice();\r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"content\">\r\n        <Title text=\"Order Summary\" style={{}} />\r\n        <br />\r\n        <dl className=\"sub_total\">\r\n          <dt>Product price</dt>\r\n          <dd> ${productPrice}</dd>\r\n        </dl>\r\n\r\n        <dl className=\"shipping\">\r\n          <dt>Shipping cost</dt>\r\n          <dd> ${shippingCost}</dd>\r\n        </dl>\r\n        <dl className=\"shipping\">\r\n          <dt>Tax</dt>\r\n          <dd> ${tax}</dd>\r\n        </dl>\r\n        <div className=\"hr\"></div>\r\n\r\n        <dl className=\"total\">\r\n          <dt>Total</dt>\r\n          <dd> ${total}</dd>\r\n        </dl>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default OrderSummary;\r\n\r\nconst Container = styled.div`\r\n  max-width: 35rem;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    /* margin: 0; */\r\n  }\r\n\r\n  .content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    margin-top: 3.3rem;\r\n    padding: 2rem;\r\n    box-shadow: var(--shadow-3);\r\n    border-radius: 0.5rem;\r\n\r\n    dd,\r\n    dt {\r\n      font-size: 1.4rem;\r\n      color: #000;\r\n      font-weight: 400;\r\n    }\r\n    .sub_total {\r\n      display: flex;\r\n      justify-content: space-between;\r\n    }\r\n    .shipping {\r\n      display: flex;\r\n      justify-content: space-between;\r\n    }\r\n    .total {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n\r\n      dd,\r\n      dt {\r\n        font-size: 1.4rem;\r\n        color: #000;\r\n        font-weight: 600;\r\n      }\r\n      dd {\r\n        font-size: 2rem;\r\n      }\r\n    }\r\n    .hr {\r\n      border: 1px solid #f2f2f2;\r\n      margin: 2rem 0;\r\n    }\r\n    .buy_now {\r\n      width: 100%;\r\n      border: none;\r\n      background: tomato;\r\n      padding: 1rem 0;\r\n      border-radius: 0.5rem;\r\n      font-size: 1.6rem;\r\n      color: #fff;\r\n      cursor: pointer;\r\n      margin: 2rem 0 1rem;\r\n    }\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n    padding-right: 0.5rem;\r\n  }\r\n`;\r\n","import { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport HomeIcon from \"@mui/icons-material/Home\";\r\nimport LocalPhoneIcon from \"@mui/icons-material/LocalPhone\";\r\nimport AddLocationAltIcon from \"@mui/icons-material/AddLocationAlt\";\r\nimport PublicIcon from \"@mui/icons-material/Public\";\r\nimport TransferWithinAStationIcon from \"@mui/icons-material/TransferWithinAStation\";\r\nimport LocationCityIcon from \"@mui/icons-material/LocationCity\";\r\nimport axios from \"axios\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport TextInput from \"../utils/formik/TextInput\";\r\nimport SelectBox from \"../utils/formik/SelectBox\";\r\nimport { toast } from \"react-toastify\";\r\nimport MUIButton from \"../utils/reUseableComponents/MUIButton\";\r\n\r\nconst ShippingInfo = ({ setIsShipping }) => {\r\n  const [countryCode, setCountryCode] = useState(\"\");\r\n  const [stateCode, setStateCode] = useState(\"\");\r\n  const [btnDisabled, setBtnDisabled] = useState(false);\r\n  const [initialValues, setInitialValues] = useState({\r\n    address: \"\",\r\n    phoneNo: \"\",\r\n    postCode: \"\",\r\n    country: \"\",\r\n    state: \"\",\r\n    city: \"\",\r\n  });\r\n\r\n  // fetch previous shipping info and set value on input field\r\n  useEffect(() => {\r\n    axios.get(\"/api/v1/shippinginfo\").then((res) => {\r\n      if (res.status === 200) {\r\n        const country = Country.getAllCountries()?.find(\r\n          (country) => country.name === res?.data?.shippingInfo?.country\r\n        );\r\n        const state = State.getStatesOfCountry(country.isoCode)?.find(\r\n          (state) => state.name === res?.data?.shippingInfo?.state\r\n        );\r\n        const city = City.getCitiesOfState(\r\n          country.isoCode,\r\n          state.isoCode\r\n        )?.find((city) => city.name === res?.data?.shippingInfo?.city);\r\n\r\n        setCountryCode(country.isoCode);\r\n        setStateCode(state.isoCode);\r\n\r\n        setInitialValues({\r\n          address: res?.data?.shippingInfo?.address,\r\n          phoneNo: res?.data?.shippingInfo?.phoneNo,\r\n          postCode: res?.data?.shippingInfo?.postCode,\r\n          country: country.isoCode,\r\n          state: state.isoCode,\r\n          city: city.name,\r\n        });\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <ShippingContainer>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={yup.object({\r\n          address: yup.string().required(\"Address is required.\"),\r\n          phoneNo: yup.string().required(\"Phone number is required.\"),\r\n          postCode: yup.number().required(\"Zip code is required.\"),\r\n          country: yup.string().required(\"Country is required.\"),\r\n          state: yup.string().required(\"State is required.\"),\r\n          city: yup.string().required(\"City is required.\"),\r\n        })}\r\n        validate={(values) => {\r\n          if (values.country) {\r\n            setCountryCode(values.country);\r\n          }\r\n          if (values.state) {\r\n            setStateCode(values.state);\r\n          }\r\n\r\n          setBtnDisabled(false);\r\n          setIsShipping(false);\r\n        }}\r\n        onSubmit={(values, { resetForm }) => {\r\n          const shippingInfo = {\r\n            ...values,\r\n            country: Country.getCountryByCode(values.country).name,\r\n            state: State.getStateByCodeAndCountry(values.state, values.country)\r\n              .name,\r\n          };\r\n\r\n          axios\r\n            .post(\"/api/v1/shippinginfo/add\", shippingInfo)\r\n            .then((res) => {\r\n              toast.success(res?.data?.message);\r\n              setBtnDisabled(true);\r\n              setIsShipping(true);\r\n            })\r\n            .catch((err) => {\r\n              toast.error(err?.message);\r\n            });\r\n        }}\r\n        enableReinitialize\r\n      >\r\n        <Form>\r\n          <div className=\"input_group\">\r\n            <HomeIcon fontSize=\"large\" style={{ marginBottom: \"2rem\" }} />\r\n            <TextInput\r\n              style={{ width: \"100%\" }}\r\n              type=\"text\"\r\n              name=\"address\"\r\n              placeholder=\"Enter your shipping address\"\r\n            />\r\n          </div>\r\n          <div className=\"input_group\">\r\n            <LocalPhoneIcon fontSize=\"large\" style={{ marginBottom: \"2rem\" }} />\r\n            <TextInput\r\n              type=\"phone\"\r\n              name=\"phoneNo\"\r\n              placeholder=\"Enter your phone number\"\r\n            />\r\n          </div>\r\n          <div className=\"input_group\">\r\n            <AddLocationAltIcon\r\n              fontSize=\"large\"\r\n              style={{ marginBottom: \"2rem\" }}\r\n            />\r\n            <TextInput\r\n              type=\"number\"\r\n              name=\"postCode\"\r\n              placeholder=\"Enter your zip code\"\r\n            />\r\n          </div>\r\n          <div className=\"input_group\">\r\n            <PublicIcon fontSize=\"large\" style={{ marginBottom: \"2rem\" }} />\r\n            <SelectBox name=\"country\">\r\n              <option hidden>Select country</option>\r\n              {Country &&\r\n                Country.getAllCountries().map((country) => (\r\n                  <option key={country.isoCode} value={country.isoCode}>\r\n                    {country.name}\r\n                  </option>\r\n                ))}\r\n            </SelectBox>\r\n          </div>\r\n          {countryCode && (\r\n            <div className=\"input_group\">\r\n              <TransferWithinAStationIcon\r\n                fontSize=\"large\"\r\n                style={{ marginBottom: \"2rem\" }}\r\n              />\r\n              <SelectBox name=\"state\">\r\n                <option hidden>Select state</option>\r\n                {State &&\r\n                  State.getStatesOfCountry(countryCode).map((state) => (\r\n                    <option key={state.isoCode} value={state.isoCode}>\r\n                      {state.name}\r\n                    </option>\r\n                  ))}\r\n              </SelectBox>\r\n            </div>\r\n          )}\r\n          {stateCode && (\r\n            <div className=\"input_group\">\r\n              <LocationCityIcon\r\n                fontSize=\"large\"\r\n                style={{ marginBottom: \"2rem\" }}\r\n              />\r\n              <SelectBox name=\"city\">\r\n                <option hidden>Select city</option>\r\n                {City &&\r\n                  City.getCitiesOfState(countryCode, stateCode).map((city) => (\r\n                    <option key={city.name} value={city.name}>\r\n                      {city.name}\r\n                    </option>\r\n                  ))}\r\n              </SelectBox>\r\n            </div>\r\n          )}\r\n\r\n          <MUIButton type=\"submit\" disabled={btnDisabled} variant=\"contained\">\r\n            Save and continue\r\n          </MUIButton>\r\n        </Form>\r\n      </Formik>\r\n    </ShippingContainer>\r\n  );\r\n};\r\n\r\nexport default ShippingInfo;\r\n\r\nconst ShippingContainer = styled.div`\r\n  width: 100%;\r\n  box-shadow: var(--shadow-3);\r\n  border-radius: 0.5rem;\r\n  padding: 2rem;\r\n  z-index: 100;\r\n\r\n  .input_group {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n  }\r\n`;\r\n","import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport {\n  useGetMyCartListQuery,\n  useRemoveAllFromCartMutation,\n} from \"../../../redux/api/cart/cartAPI\";\nimport { useEffect, useState } from \"react\";\nimport useCalculatePrice from \"./useCalculatePrice\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst useCreateNewOrder = ({ setIsLoading }) => {\n  const [shippingInfo, setShippingInfo] = useState(null);\n\n  const navigate = useNavigate();\n  const [removeAllFromCart] = useRemoveAllFromCartMutation();\n\n  // fetch shiping info as soon as page loads\n  useEffect(() => {\n    axios.get(\"/api/v1/shippinginfo\").then((res) => {\n      setShippingInfo(res?.data?.shippingInfo);\n    });\n  }, []);\n\n  // get my cart list\n  const { data } = useGetMyCartListQuery();\n  const orderdItems = data?.carts;\n\n  const { productPrice, shippingCost, tax, total } = useCalculatePrice();\n\n  // Create an Order After complete the payment\n  const createNewOrder = ({ paymentProvider, paymentId, paymentStatus }) => {\n    let orderItems = [];\n    orderdItems.map((item) => {\n      orderItems.push({\n        productId: item.product._id,\n        name: item.product.name,\n        price: item.product.price,\n        quantity: item.quantity,\n        image: item.product.images[0].url,\n      });\n\n      return null;\n    });\n\n    const newOrder = {\n      shippingInfo,\n      orderItems,\n      paymentInfo: {\n        id: paymentId,\n        provider: paymentProvider,\n        status: paymentStatus,\n        currency: \"USD\",\n        itemsPrice: productPrice,\n        taxPrice: tax,\n        shippingPrice: shippingCost,\n        totalPrice: total,\n      },\n    };\n\n    axios\n      .post(\"/api/v1/order/new\", newOrder)\n      .then((res) => {\n        if (res.status === 201) {\n          toast.success(\n            res.data?.message || \"Your order has been Successfully created.\"\n          );\n          removeAllFromCart();\n          setTimeout(() => {\n            navigate(\"/order/sucess\");\n          }, 3000);\n        }\n      })\n      .catch((err) => {\n        toast.error(err?.message || \"Your order have not created.\");\n        console.error(err);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return { createNewOrder };\n};\n\nexport default useCreateNewOrder;\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  PaymentElement,\r\n  useStripe,\r\n  useElements,\r\n} from \"@stripe/react-stripe-js\";\r\nimport useCreateNewOrder from \"../utils/customHooks/useCreateNewOrder\";\r\n\r\nexport default function CheckoutForm({ clientSecret }) {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [message, setMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const { createNewOrder } = useCreateNewOrder({ setIsLoading });\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    const { error, paymentIntent } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // Make sure to change this to your payment completion page\r\n        // return_url: \"http://localhost:3000/order/sucess\",\r\n      },\r\n      redirect: \"if_required\",\r\n    });\r\n\r\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n      switch (paymentIntent.status) {\r\n        case \"succeeded\":\r\n          setMessage(\"Payment succeeded!\");\r\n          break;\r\n        case \"processing\":\r\n          setMessage(\"Your payment is processing.\");\r\n          break;\r\n        case \"requires_payment_method\":\r\n          setMessage(\"Your payment was not successful, please try again.\");\r\n          break;\r\n        default:\r\n          setMessage(\"Something went wrong.\");\r\n          break;\r\n      }\r\n    });\r\n    // This point will only be reached if there is an immediate error when\r\n    // confirming the payment. Otherwise, your customer will be redirected to\r\n    // your `return_url`. For some payment methods like iDEAL, your customer will\r\n    // be redirected to an intermediate site first to authorize the payment, then\r\n    // redirected to the `return_url`.\r\n\r\n    if (error) {\r\n      if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n        setMessage(error.message);\r\n      } else {\r\n        setMessage(error.message);\r\n      }\r\n    }\r\n\r\n    if (!error && paymentIntent && paymentIntent.status === \"succeeded\") {\r\n      createNewOrder({\r\n        paymentProvider: \"stripe\",\r\n        paymentId: paymentIntent.id,\r\n        paymentStatus: paymentIntent.status,\r\n      });\r\n    }\r\n  };\r\n\r\n  const paymentElementOptions = {\r\n    layout: \"tabs\",\r\n  };\r\n\r\n  return (\r\n    <CheckoutFormContainer>\r\n      <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n        <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\r\n        <button disabled={isLoading || !stripe || !elements} id=\"submit\">\r\n          <span id=\"button-text\">\r\n            {isLoading ? (\r\n              <div className=\"spinner\" id=\"spinner\"></div>\r\n            ) : (\r\n              \"Pay Now\"\r\n            )}\r\n          </span>\r\n        </button>\r\n        {/* Show any error or success messages */}\r\n        {message && <div id=\"payment-message\">{message}</div>}\r\n      </form>\r\n    </CheckoutFormContainer>\r\n  );\r\n}\r\n\r\nconst CheckoutFormContainer = styled.div`\r\n  form {\r\n    width: 30vw;\r\n    min-width: 500px;\r\n    align-self: center;\r\n    box-shadow: 0px 0px 0px 0.5px rgba(50, 50, 93, 0.1),\r\n      0px 2px 5px 0px rgba(50, 50, 93, 0.1),\r\n      0px 1px 1.5px 0px rgba(0, 0, 0, 0.07);\r\n    border-radius: 7px;\r\n    padding: 40px;\r\n\r\n    #payment-element {\r\n      margin-bottom: 24px;\r\n    }\r\n    button {\r\n      background: #5469d4;\r\n      font-family: Arial, sans-serif;\r\n      color: #ffffff;\r\n      border-radius: 4px;\r\n      border: 0;\r\n      padding: 12px 16px;\r\n      font-size: 16px;\r\n      font-weight: 600;\r\n      cursor: pointer;\r\n      display: block;\r\n      transition: all 0.2s ease;\r\n      box-shadow: 0px 4px 5.5px 0px rgba(0, 0, 0, 0.07);\r\n      width: 100%;\r\n\r\n      &:hover {\r\n        filter: contrast(115%);\r\n      }\r\n\r\n      &:disabled {\r\n        opacity: 0.5;\r\n        cursor: default;\r\n      }\r\n\r\n      .spinner,\r\n      .spinner:before,\r\n      .spinner:after {\r\n        border-radius: 50%;\r\n      }\r\n\r\n      .spinner {\r\n        color: #ffffff;\r\n        font-size: 22px;\r\n        text-indent: -99999px;\r\n        margin: 0px auto;\r\n        position: relative;\r\n        width: 20px;\r\n        height: 20px;\r\n        box-shadow: inset 0 0 0 2px;\r\n        -webkit-transform: translateZ(0);\r\n        -ms-transform: translateZ(0);\r\n        transform: translateZ(0);\r\n      }\r\n\r\n      .spinner:before,\r\n      .spinner:after {\r\n        position: absolute;\r\n        content: \"\";\r\n      }\r\n\r\n      .spinner:before {\r\n        width: 10.4px;\r\n        height: 20.4px;\r\n        background: #5469d4;\r\n        border-radius: 20.4px 0 0 20.4px;\r\n        top: -0.2px;\r\n        left: -0.2px;\r\n        -webkit-transform-origin: 10.4px 10.2px;\r\n        transform-origin: 10.4px 10.2px;\r\n        -webkit-animation: loading 2s infinite ease 1.5s;\r\n        animation: loading 2s infinite ease 1.5s;\r\n      }\r\n\r\n      .spinner:after {\r\n        width: 10.4px;\r\n        height: 10.2px;\r\n        background: #5469d4;\r\n        border-radius: 0 10.2px 10.2px 0;\r\n        top: -0.1px;\r\n        left: 10.2px;\r\n        -webkit-transform-origin: 0px 10.2px;\r\n        transform-origin: 0px 10.2px;\r\n        -webkit-animation: loading 2s infinite ease;\r\n        animation: loading 2s infinite ease;\r\n      }\r\n\r\n      @keyframes loading {\r\n        0% {\r\n          -webkit-transform: rotate(0deg);\r\n          transform: rotate(0deg);\r\n        }\r\n        100% {\r\n          -webkit-transform: rotate(360deg);\r\n          transform: rotate(360deg);\r\n        }\r\n      }\r\n    }\r\n\r\n    #payment-message {\r\n      color: rgb(105, 115, 134);\r\n      font-size: 16px;\r\n      line-height: 20px;\r\n      padding-top: 12px;\r\n      text-align: center;\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-width: 600px) {\r\n    form {\r\n      width: 80vw;\r\n      min-width: initial;\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"./CheckoutForm\";\r\nimport axios from \"axios\";\r\nimport useCalculatePrice from \"../utils/customHooks/useCalculatePrice\";\r\n\r\n// Make sure to call loadStripe outside of a component’s render to avoid\r\n// recreating the Stripe object on every render.\r\n// This is your test publishable API key.\r\n\r\nconst StripePayment = () => {\r\n  const [stripePromise, setStripePromise] = useState(null);\r\n  const [clientSecret, setClientSecret] = useState(\"\");\r\n\r\n  const { total: totalAmount } = useCalculatePrice();\r\n\r\n  // fetch stripe api key\r\n  useEffect(() => {\r\n    axios.get(\"/api/v1/stripeappikey\").then((res) => {\r\n      setStripePromise(loadStripe(res.data.stripeApiKey));\r\n    });\r\n  }, []);\r\n\r\n  // Create PaymentIntent as soon as the page loads\r\n  useEffect(() => {\r\n    if (totalAmount) {\r\n      axios\r\n        .post(`/api/v1/create-payment-intent`, {\r\n          amount: totalAmount * 100,\r\n        })\r\n        .then((res) => res.data)\r\n        .then((data) => setClientSecret(data.client_secret));\r\n    }\r\n  }, [totalAmount]);\r\n\r\n  const appearance = {\r\n    theme: \"stripe\",\r\n  };\r\n  const options = {\r\n    clientSecret,\r\n    appearance,\r\n  };\r\n\r\n  return (\r\n    <StripeContainer>\r\n      {stripePromise && clientSecret && (\r\n        <Elements options={options} stripe={stripePromise}>\r\n          <CheckoutForm clientSecret={clientSecret} />\r\n        </Elements>\r\n      )}\r\n    </StripeContainer>\r\n  );\r\n};\r\n\r\nexport default StripePayment;\r\n\r\nconst StripeContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ShippingInfo from \"./ShippingInfo\";\r\nimport StripePayment from \"./StripePayment\";\r\nimport { useGetMyCartListQuery } from \"../../redux/api/cart/cartAPI\";\r\nimport CartList from \"../cart/CartList\";\r\nimport Title from \"../utils/reUseableComponents/Title\";\r\nimport EmptyItems from \"../utils/EmptyItems\";\r\n\r\nconst OrderDetails = () => {\r\n  const [isShipping, setIsShipping] = useState(false);\r\n  const [paymentProvider, setPaymentProvider] = useState(\"\");\r\n\r\n  const paymentHandler = (provider) => {\r\n    setPaymentProvider(provider);\r\n  };\r\n\r\n  // get my cart list\r\n  const { data } = useGetMyCartListQuery();\r\n\r\n  return (\r\n    <Container>\r\n      <ShippingContainer>\r\n        <Title\r\n          variant=\"h2\"\r\n          text={\"Shipping Information\"}\r\n          style={{ marginBottom: \"1rem\" }}\r\n        />\r\n        <ShippingInfo setIsShipping={setIsShipping} />\r\n      </ShippingContainer>\r\n\r\n      {isShipping && (\r\n        <PaymentContainer>\r\n          <Title\r\n            variant=\"h2\"\r\n            text={\"Choose a Payment Methods\"}\r\n            style={{ marginBottom: \"1rem\" }}\r\n          />\r\n          <div className=\"payment_provider\">\r\n            <img\r\n              style={\r\n                paymentProvider === \"stripe\" ? { border: \"2px solid red\" } : {}\r\n              }\r\n              src=\"./images/payment/stripe.png\"\r\n              alt=\"Stripe\"\r\n              onClick={() => paymentHandler(\"stripe\")}\r\n            />\r\n          </div>\r\n          <br />\r\n          {paymentProvider === \"stripe\" && <StripePayment />}\r\n        </PaymentContainer>\r\n      )}\r\n\r\n      <ProductContainer>\r\n        <Title\r\n          variant=\"h2\"\r\n          text={`Order Review(${data?.carts?.length})`}\r\n          style={{ marginBottom: \"1rem\" }}\r\n        />\r\n\r\n        {data?.carts?.length === 0 ? (\r\n          <EmptyItems\r\n            text={\"Your cart is empty.\"}\r\n            link={\"/products\"}\r\n            btnText={\"Add Product\"}\r\n            style={{ height: \"auto\", padding: \"5rem 0\" }}\r\n          />\r\n        ) : (\r\n          <CartList cartItem={data?.carts} />\r\n        )}\r\n      </ProductContainer>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default OrderDetails;\r\n\r\nconst Container = styled.div`\r\n  flex: 3;\r\n  max-width: 100rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5rem;\r\n`;\r\n\r\nconst ShippingContainer = styled.div`\r\n  width: 100%;\r\n`;\r\nconst PaymentContainer = styled.div`\r\n  margin-bottom: 2rem;\r\n  .payment_provider {\r\n    img {\r\n      width: 20rem;\r\n      cursor: pointer;\r\n      user-select: none;\r\n      border-radius: 5px;\r\n    }\r\n  }\r\n`;\r\nconst ProductContainer = styled.div``;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PageContainer from \"../utils/PageContainer\";\r\nimport OrderSummary from \"./OrderSummary\";\r\nimport OrderDetails from \"./OrderDetails\";\r\nimport { useGetMyCartListQuery } from \"../../redux/api/cart/cartAPI\";\r\nimport EmptyItems from \"../utils/EmptyItems\";\r\nimport Error from \"../utils/fetchUtils/Error\";\r\n\r\nconst Order = () => {\r\n  // get my cart list\r\n  const { isSuccess, data, isError, error } = useGetMyCartListQuery();\r\n\r\n  return (\r\n    <PageContainer>\r\n      <OrderContainer>\r\n        {isError && (\r\n          <>\r\n            {error.status === 404 ? (\r\n              <EmptyItems\r\n                text={error.data?.message || \"Your cart is empty.\"}\r\n                link={\"/products\"}\r\n                btnText={\"Add Product\"}\r\n              />\r\n            ) : (\r\n              <Error text={error.data?.message} style={{ padding: \"5rem 0\" }} />\r\n            )}\r\n          </>\r\n        )}\r\n\r\n        {isSuccess && data?.carts?.length && (\r\n          <Content>\r\n            <OrderDetails />\r\n            <OrderSummary />\r\n          </Content>\r\n        )}\r\n      </OrderContainer>\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default Order;\r\n\r\nconst OrderContainer = styled.div`\r\n  width: 100%;\r\n  max-width: 1440px;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 5rem;\r\n  padding: 2rem 0;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    flex-direction: column;\r\n    padding-bottom: 5rem;\r\n  }\r\n`;\r\n","import { useField } from \"formik\";\nimport styled from \"styled-components\";\nimport ValidationError from \"../validationUtils/ValidationError\";\n\nconst SelectBox = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <SelectContainer>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <select {...field} {...props} />\n      {meta.touched && meta.error && <ValidationError message={meta.error} />}\n    </SelectContainer>\n  );\n};\n\nexport default SelectBox;\n\nconst SelectContainer = styled.div`\n  width: 100%;\n  margin-bottom: 2rem;\n  label {\n    color: var(--text-secondary);\n    font-size: 1.3rem;\n  }\n  select {\n    background: #fff;\n    color: var(--text-primary);\n    width: 100%;\n    height: 3.5rem;\n    padding: 0 1rem;\n    margin-top: 0.5rem;\n    border: none;\n    outline: none;\n    border-radius: 2px;\n    font-size: 1.3rem;\n    box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px,\n      rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;\n    &:focus {\n      box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\n        rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;\n    }\n\n    option {\n      &:checked {\n        color: tomato;\n      }\n    }\n  }\n`;\n","import { useField } from \"formik\";\nimport styled from \"styled-components\";\nimport ValidationError from \"../validationUtils/ValidationError\";\n\nconst TextInput = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input>. We can use field meta to show an error\n  // message if the field is invalid and it has been touched (i.e. visited)\n  const [field, meta] = useField(props);\n  return (\n    <InputGroup>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input {...field} {...props} />\n      {meta.touched && meta.error && <ValidationError message={meta.error} />}\n    </InputGroup>\n  );\n};\n\nexport default TextInput;\n\nconst InputGroup = styled.div`\n  width: 100%;\n  margin-bottom: 2rem;\n\n  label {\n    color: var(--text-secondary);\n    font-size: 1.3rem;\n  }\n  input {\n    background: #fff;\n    color: var(--text-primary);\n    width: 100%;\n    height: 3.5rem;\n    padding: 0 1rem;\n    margin-top: 0.5rem;\n    border: none;\n    outline: none;\n    font-size: 1.3rem;\n    border-radius: 2px;\n    box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px,\n      rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;\n    &:focus {\n      box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\n        rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;\n\n      color: #000;\n    }\n    &::placeholder {\n      font-size: 1.3rem;\n    }\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ValidationError = ({ message }) => {\n  return (\n    <Container className=\"error\">\n      <span>i</span> {message}\n    </Container>\n  );\n};\n\nexport default ValidationError;\n\nconst Container = styled.div`\n  font-size: 1.1rem;\n  padding: 0.5rem 0;\n  span {\n    font-style: italic;\n    color: tomato;\n    margin-right: 0.3rem;\n    font-weight: 700;\n    font-size: 1.1rem;\n  }\n`;\n"],"names":["useState","productPrice","setProductPrice","shippingCost","setShippingCost","tax","setTax","total","setTotal","data","useGetMyCartListQuery","orderdItems","carts","useEffect","calcProductPrice","reduce","acc","item","product","price","quantity","calcShippingCost","Math","round","rate","calcTax","useCalculatePrice","Container","className","Title","text","style","styled","setIsShipping","countryCode","setCountryCode","stateCode","setStateCode","btnDisabled","setBtnDisabled","address","phoneNo","postCode","country","state","city","initialValues","setInitialValues","axios","then","res","status","Country","find","name","shippingInfo","State","isoCode","City","ShippingContainer","validationSchema","yup","required","validate","values","onSubmit","resetForm","toast","message","catch","err","enableReinitialize","Home","fontSize","marginBottom","TextInput","width","type","placeholder","LocalPhone","AddLocationAlt","Public","SelectBox","hidden","map","value","TransferWithinAStation","LocationCity","MUIButton","disabled","variant","setIsLoading","setShippingInfo","navigate","useNavigate","useRemoveAllFromCartMutation","removeAllFromCart","createNewOrder","paymentProvider","paymentId","paymentStatus","orderItems","push","productId","_id","image","images","url","newOrder","paymentInfo","id","provider","currency","itemsPrice","taxPrice","shippingPrice","totalPrice","setTimeout","console","error","finally","CheckoutForm","clientSecret","stripe","useStripe","elements","useElements","setMessage","isLoading","useCreateNewOrder","handleSubmit","e","preventDefault","confirmPayment","confirmParams","redirect","paymentIntent","retrievePaymentIntent","CheckoutFormContainer","PaymentElement","options","layout","stripePromise","setStripePromise","setClientSecret","totalAmount","loadStripe","stripeApiKey","amount","client_secret","appearance","theme","StripeContainer","Elements","isShipping","setPaymentProvider","PaymentContainer","border","src","alt","onClick","ProductContainer","length","EmptyItems","link","btnText","height","padding","CartList","cartItem","isSuccess","isError","PageContainer","OrderContainer","Error","Content","label","props","useField","field","meta","SelectContainer","htmlFor","touched","InputGroup"],"sourceRoot":""}