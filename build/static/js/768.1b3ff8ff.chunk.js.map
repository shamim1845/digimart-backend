{"version":3,"file":"static/js/768.1b3ff8ff.chunk.js","mappings":"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","sources":["components/Auth/Login.js","components/utils/formik/TextInput.jsx","components/utils/reUseableComponents/Buttons.jsx","components/utils/reUseableComponents/Title.jsx","components/utils/validationUtils/ValidationError.jsx"],"sourcesContent":["import { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport axiox from \"axios\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Title from \"../utils/reUseableComponents/Title\";\r\nimport Button from \"../utils/reUseableComponents/Buttons\";\r\nimport TextInput from \"../utils/formik/TextInput\";\r\n\r\nconst Login = () => {\r\n  const [nextRouteIsAdmin, setNextRouteIsAdmin] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const redirectPath = location.state?.path || \"/products\";\r\n  const {\r\n    authenticated,\r\n    userInfo: { role },\r\n  } = useSelector((state) => state.user);\r\n\r\n  // If user already authenticated navigate to the redirectPath\r\n  useEffect(() => {\r\n    if (!authenticated) return;\r\n    if (!redirectPath.includes(\"admin\")) {\r\n      return navigate(redirectPath);\r\n    }\r\n\r\n    if (role === \"admin\") {\r\n      return navigate(redirectPath);\r\n    } else {\r\n      setNextRouteIsAdmin(true);\r\n    }\r\n  }, [authenticated, redirectPath, navigate, role]);\r\n\r\n  return (\r\n    <Container>\r\n      <FormContainer>\r\n        <Title text={`Sign In ${nextRouteIsAdmin ? \"as an Admin\" : \"\"} `} />\r\n\r\n        <Formik\r\n          initialValues={{\r\n            email: \"demo@digimart.com\",\r\n            password: \"demo12345678\",\r\n          }}\r\n          validationSchema={yup.object({\r\n            email: yup\r\n              .string()\r\n              .email(\"Email must be a valid email.\")\r\n              .required(\"Email is required.\"),\r\n            password: yup\r\n              .string()\r\n              .min(8, \"Password must have at least 8 characters.\")\r\n              .required(\"Password is required.\"),\r\n          })}\r\n          onSubmit={(values, { resetForm }) => {\r\n            const { email, password } = values;\r\n\r\n            axiox\r\n              .post(`/api/v1/login`, { email, password })\r\n              .then((res) => {\r\n                if (res.status === 200) {\r\n                  toast.success(\"Login successfull.\");\r\n\r\n                  setTimeout(() => {\r\n                    navigate(redirectPath, { replace: true });\r\n                    window.location.reload();\r\n                  }, 2000);\r\n                } else {\r\n                  toast.error(\"Invalid login credentials.\");\r\n                }\r\n              })\r\n              .catch((err) => {\r\n                toast.error(\r\n                  err?.response?.data?.message || \"Invalid login credentials.\"\r\n                );\r\n                console.error(err);\r\n              });\r\n          }}\r\n        >\r\n          <Form>\r\n            <TextInput\r\n              label=\"Email\"\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"Enter Your Email\"\r\n            />\r\n            <TextInput\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Enter your password\"\r\n            />\r\n\r\n            <Button type=\"submit\" text=\"Login\" />\r\n          </Form>\r\n        </Formik>\r\n\r\n        <Message>\r\n          <p>\r\n            By continuing, you are agree to DIGIMART's{\" \"}\r\n            <Link to={\"/conditions\"}> Conditions of Use </Link>and{\" \"}\r\n            <Link to={\"/privacy-policy\"}> Privacy Notice.</Link>\r\n          </p>\r\n          <Link to={\"/password/forgot\"}> Forgot your password?</Link>\r\n        </Message>\r\n      </FormContainer>\r\n\r\n      <ButtonContainer>\r\n        <div>\r\n          <p>New to DIGIMART?</p>\r\n          <Link to={\"/register\"}>Create Your Account</Link>\r\n        </div>\r\n      </ButtonContainer>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  max-width: 50rem;\r\n  margin: 5rem auto;\r\n  padding: 1rem;\r\n\r\n  @media screen and (max-width: 576px) {\r\n    margin: 2rem auto;\r\n  }\r\n`;\r\n\r\nconst FormContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  padding: 3rem;\r\n  box-shadow: var(--shadow-1);\r\n  border-radius: 5px;\r\n\r\n  form {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst Message = styled.div`\r\n  margin: 1rem 0;\r\n  p {\r\n    color: var(--text-secondary);\r\n\r\n    margin-bottom: 1rem;\r\n  }\r\n  a {\r\n    transition: all 0.3s ease-in-out;\r\n  }\r\n  a:hover {\r\n    color: tomato;\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  margin: 3rem;\r\n  width: 100%;\r\n  div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n\r\n    & p {\r\n      margin: 1rem 0;\r\n    }\r\n    & a {\r\n      text-align: center;\r\n      border: 1px solid var(--text-primary);\r\n      width: 100%;\r\n      border-radius: 3px;\r\n      padding: 1rem;\r\n      transition: all 0.3s ease-in-out;\r\n      &:hover {\r\n        box-shadow: rgba(0, 0, 0, 0.1) 0px -50px 36px -30px inset;\r\n        color: tomato;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { useField } from \"formik\";\nimport styled from \"styled-components\";\nimport ValidationError from \"../validationUtils/ValidationError\";\n\nconst TextInput = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input>. We can use field meta to show an error\n  // message if the field is invalid and it has been touched (i.e. visited)\n  const [field, meta] = useField(props);\n  return (\n    <InputGroup>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input {...field} {...props} />\n      {meta.touched && meta.error && <ValidationError message={meta.error} />}\n    </InputGroup>\n  );\n};\n\nexport default TextInput;\n\nconst InputGroup = styled.div`\n  width: 100%;\n  margin-bottom: 2rem;\n\n  label {\n    color: var(--text-secondary);\n    font-size: 1.3rem;\n  }\n  input {\n    background: #fff;\n    color: var(--text-primary);\n    width: 100%;\n    height: 4rem;\n    padding: 0 1rem;\n    margin-top: 0.5rem;\n    border: none;\n    outline: none;\n    font-size: 1.3rem;\n    border-radius: 2px;\n    box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px,\n      rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;\n    &:focus {\n      box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\n        rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;\n\n      color: #000;\n    }\n    &::placeholder {\n      font-size: 1.3rem;\n    }\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const Button = ({ text, children, ...rest }) => {\n  return (\n    <ButtonDefault {...rest}>\n      <span>{text}</span> {children}\n    </ButtonDefault>\n  );\n};\n\nexport default Button;\n\nconst ButtonDefault = styled.button`\n  border: none;\n  color: var(--text-primary);\n  background-color: tomato;\n  padding: 1rem 3rem;\n  font-size: 1.3rem;\n  font-weight: 500;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n\n  &:hover {\n    background-color: #dd5a43;\n    color: #f1f1f1;\n  }\n  &:disabled {\n    background-color: #dd5a43d3;\n    cursor: not-allowed;\n    color: var(--text-primary);\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Title = ({ variant = \"h1\", text, style }) => {\n  return (\n    <Container>\n      {variant === (\"h2\" || \"H2\") && <h2 style={style}>{text}</h2>}\n      {variant === (\"h3\" || \"H3\") && <h3 style={style}>{text}</h3>}\n      {variant === (\"h1\" || \"H1\") && <h1 style={style}>{text}</h1>}\n      {variant === (\"h4\" || \"H4\") && <h4 style={style}>{text}</h4>}\n    </Container>\n  );\n};\n\nexport default Title;\n\nconst Container = styled.div`\n  color: var(--text-primary);\n\n  h1 {\n    font-size: 2.4rem;\n  }\n\n  h2 {\n    font-size: 2rem;\n  }\n\n  h3 {\n    font-size: 1.8rem;\n  }\n\n  h4 {\n    font-size: 1.4rem;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ValidationError = ({ message }) => {\n  return (\n    <Container className=\"error\">\n      <span>i</span> {message}\n    </Container>\n  );\n};\n\nexport default ValidationError;\n\nconst Container = styled.div`\n  font-size: 1.1rem;\n  padding: 0.5rem 0;\n  span {\n    font-style: italic;\n    color: tomato;\n    margin-right: 0.3rem;\n    font-weight: 700;\n    font-size: 1.1rem;\n  }\n`;\n"],"names":["_location$state","_useState","useState","_useState2","_slicedToArray","nextRouteIsAdmin","setNextRouteIsAdmin","navigate","useNavigate","redirectPath","useLocation","state","path","_useSelector","useSelector","user","authenticated","role","userInfo","useEffect","includes","_jsxs","Container","children","FormContainer","_jsx","Title","text","concat","Formik","initialValues","email","password","validationSchema","yup","required","min","onSubmit","values","_ref","resetForm","axiox","then","res","status","toast","success","setTimeout","replace","window","location","reload","error","catch","err","_err$response","_err$response$data","response","data","message","console","Form","TextInput","label","type","name","placeholder","Button","Message","Link","to","ButtonContainer","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","props","_objectWithoutProperties","_excluded","_useField","useField","_useField2","field","meta","InputGroup","htmlFor","id","_objectSpread","touched","ValidationError","rest","ButtonDefault","button","_ref$variant","variant","style","className"],"sourceRoot":""}