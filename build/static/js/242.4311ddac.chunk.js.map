{"version":3,"file":"static/js/242.4311ddac.chunk.js","mappings":"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","sources":["components/Auth/ResetPassword.js","components/utils/formik/TextInput.jsx","components/utils/reUseableComponents/Buttons.jsx","components/utils/reUseableComponents/Title.jsx","components/utils/validationUtils/ValidationError.jsx"],"sourcesContent":["import { useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport axiox from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport TextInput from \"../utils/formik/TextInput\";\r\nimport Button from \"../utils/reUseableComponents/Buttons\";\r\nimport Title from \"../utils/reUseableComponents/Title\";\r\n\r\nconst ResetPassword = () => {\r\n  const navigate = useNavigate();\r\n  let params = useParams();\r\n\r\n  return (\r\n    <Container>\r\n      <FormContainer>\r\n        <Title text=\"Reset Password\" />\r\n\r\n        <Formik\r\n          initialValues={{\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n          }}\r\n          validationSchema={yup.object({\r\n            password: yup\r\n              .string()\r\n              .min(8, \"Password must have at least 8 characters.\")\r\n              .required(\"Password is required.\"),\r\n            confirmPassword: yup\r\n              .string()\r\n              .when(\"password\", (password, field) =>\r\n                password\r\n                  ? field\r\n                      .required(\"Confirm password is required.\")\r\n                      .oneOf(\r\n                        [yup.ref(\"password\", \"must match\")],\r\n                        \"Password and Confirm Password must match.\"\r\n                      )\r\n                  : field\r\n              ),\r\n          })}\r\n          onSubmit={(values, { resetForm }) => {\r\n            const { password, confirmPassword } = values;\r\n\r\n            axiox\r\n              .put(`/api/v1/password/reset/${params.token}`, {\r\n                password,\r\n                confirmPassword,\r\n              })\r\n              .then((res) => {\r\n                if (res.status === 200) {\r\n                  toast.success(\"Password Update successfully.\");\r\n\r\n                  setTimeout(() => {\r\n                    navigate(\"/\");\r\n                    window.location.reload();\r\n                  }, 3000);\r\n                } else {\r\n                  toast.info(\"Something went wrong.\");\r\n                }\r\n              })\r\n              .catch((err) => {\r\n                toast.error(\r\n                  err?.response?.data?.message ||\r\n                    \"Invalid Password Reset Details.\"\r\n                );\r\n                console.log(err);\r\n              });\r\n\r\n            resetForm({ values: \"\" });\r\n          }}\r\n        >\r\n          <Form>\r\n            <TextInput\r\n              label=\"New Password\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Enter Your password\"\r\n            />\r\n\r\n            <TextInput\r\n              label=\"Confirm New Password\"\r\n              type=\"password\"\r\n              name=\"confirmPassword\"\r\n              placeholder=\"Confirm password\"\r\n            />\r\n\r\n            <Button type=\"submit\" text=\"Submit\" />\r\n          </Form>\r\n        </Formik>\r\n      </FormContainer>\r\n    </Container>\r\n  );\r\n\r\n  //   <>\r\n  //     <LoginContainer>\r\n  //       <ContainerTop>\r\n  //         <FormContainer>\r\n  //           <Title> Reset Password </Title>\r\n  //           <Form onSubmit={formik.handleSubmit}>\r\n  //             <InputGroup>\r\n  //               <div>\r\n  //                 <label htmlFor=\"password\">New Password</label>\r\n  //                 <input\r\n  //                   type=\"password\"\r\n  //                   name=\"password\"\r\n  //                   onChange={formik.handleChange}\r\n  //                   value={formik.values.password}\r\n  //                 />\r\n  //                 {formik.touched.password && formik.errors.password && (\r\n  //                   <p>\r\n  //                     <span>i</span> {formik.errors.password}{\" \"}\r\n  //                   </p>\r\n  //                 )}\r\n  //               </div>\r\n\r\n  //               <div>\r\n  //                 <label htmlFor=\"confirmPassword\">Confirm New Password</label>\r\n  //                 <input\r\n  //                   type=\"password\"\r\n  //                   name=\"confirmPassword\"\r\n  //                   onChange={formik.handleChange}\r\n  //                   value={formik.values.confirmPassword}\r\n  //                 />\r\n  //                 {formik.touched.confirmPassword &&\r\n  //                   formik.errors.confirmPassword && (\r\n  //                     <p>\r\n  //                       <span>i</span> {formik.errors.confirmPassword}{\" \"}\r\n  //                     </p>\r\n  //                   )}\r\n  //               </div>\r\n  //             </InputGroup>\r\n  //             <Button>\r\n  //               <input type=\"submit\" value=\"Submit\" />\r\n  //             </Button>\r\n  //           </Form>\r\n  //         </FormContainer>\r\n  //       </ContainerTop>\r\n  //     </LoginContainer>\r\n  //   </>\r\n  // );\r\n};\r\n\r\nexport default ResetPassword;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  max-width: 50rem;\r\n  margin: 5rem auto;\r\n  padding: 1rem;\r\n\r\n  @media screen and (max-width: 576px) {\r\n    margin: 2rem auto;\r\n  }\r\n`;\r\n\r\nconst FormContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  padding: 3rem;\r\n  box-shadow: var(--shadow-1);\r\n  border-radius: 5px;\r\n\r\n  form {\r\n    width: 100%;\r\n  }\r\n`;\r\n","import { useField } from \"formik\";\nimport styled from \"styled-components\";\nimport ValidationError from \"../validationUtils/ValidationError\";\n\nconst TextInput = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input>. We can use field meta to show an error\n  // message if the field is invalid and it has been touched (i.e. visited)\n  const [field, meta] = useField(props);\n  return (\n    <InputGroup>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input {...field} {...props} />\n      {meta.touched && meta.error && <ValidationError message={meta.error} />}\n    </InputGroup>\n  );\n};\n\nexport default TextInput;\n\nconst InputGroup = styled.div`\n  width: 100%;\n  margin-bottom: 2rem;\n\n  label {\n    color: var(--text-secondary);\n    font-size: 1.3rem;\n  }\n  input {\n    background: #fff;\n    color: var(--text-primary);\n    width: 100%;\n    height: 4rem;\n    padding: 0 1rem;\n    margin-top: 0.5rem;\n    border: none;\n    outline: none;\n    font-size: 1.3rem;\n    border-radius: 2px;\n    box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px,\n      rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;\n    &:focus {\n      box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\n        rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;\n\n      color: #000;\n    }\n    &::placeholder {\n      font-size: 1.3rem;\n    }\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const Button = ({ text, children, ...rest }) => {\n  return (\n    <ButtonDefault {...rest}>\n      <span>{text}</span> {children}\n    </ButtonDefault>\n  );\n};\n\nexport default Button;\n\nconst ButtonDefault = styled.button`\n  border: none;\n  color: var(--text-primary);\n  background-color: tomato;\n  padding: 1rem 3rem;\n  font-size: 1.3rem;\n  font-weight: 500;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n\n  &:hover {\n    background-color: #dd5a43;\n    color: #f1f1f1;\n  }\n  &:disabled {\n    background-color: #dd5a43d3;\n    cursor: not-allowed;\n    color: var(--text-primary);\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Title = ({ variant = \"h1\", text, style }) => {\n  return (\n    <Container>\n      {variant === (\"h2\" || \"H2\") && <h2 style={style}>{text}</h2>}\n      {variant === (\"h3\" || \"H3\") && <h3 style={style}>{text}</h3>}\n      {variant === (\"h1\" || \"H1\") && <h1 style={style}>{text}</h1>}\n      {variant === (\"h4\" || \"H4\") && <h4 style={style}>{text}</h4>}\n    </Container>\n  );\n};\n\nexport default Title;\n\nconst Container = styled.div`\n  color: var(--text-primary);\n\n  h1 {\n    font-size: 2.4rem;\n  }\n\n  h2 {\n    font-size: 2rem;\n  }\n\n  h3 {\n    font-size: 1.8rem;\n  }\n\n  h4 {\n    font-size: 1.4rem;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ValidationError = ({ message }) => {\n  return (\n    <Container className=\"error\">\n      <span>i</span> {message}\n    </Container>\n  );\n};\n\nexport default ValidationError;\n\nconst Container = styled.div`\n  font-size: 1.1rem;\n  padding: 0.5rem 0;\n  span {\n    font-style: italic;\n    color: tomato;\n    margin-right: 0.3rem;\n    font-weight: 700;\n    font-size: 1.1rem;\n  }\n`;\n"],"names":["navigate","useNavigate","params","useParams","_jsx","Container","children","_jsxs","FormContainer","Title","text","Formik","initialValues","password","confirmPassword","validationSchema","yup","min","required","when","field","oneOf","onSubmit","values","_ref","resetForm","axiox","concat","token","then","res","status","toast","success","setTimeout","window","location","reload","info","catch","err","_err$response","_err$response$data","error","response","data","message","console","log","Form","TextInput","label","type","name","placeholder","Button","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","props","_objectWithoutProperties","_excluded","_useField","useField","_useField2","_slicedToArray","meta","InputGroup","htmlFor","id","_objectSpread","touched","ValidationError","rest","ButtonDefault","button","_ref$variant","variant","style","className"],"sourceRoot":""}