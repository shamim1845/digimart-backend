{"version":3,"file":"static/js/275.62ecf173.chunk.js","mappings":"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","sources":["components/Auth/Register.js","components/utils/formik/TextInput.jsx","components/utils/reUseableComponents/Buttons.jsx","components/utils/reUseableComponents/Title.jsx","components/utils/validationUtils/ValidationError.jsx"],"sourcesContent":["import { Link, useNavigate } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport axiox from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Title from \"../utils/reUseableComponents/Title\";\r\nimport Button from \"../utils/reUseableComponents/Buttons\";\r\nimport TextInput from \"../utils/formik/TextInput\";\r\n\r\nconst Register = () => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <Container>\r\n      <FormContainer>\r\n        <Title text=\"Create an account \" />\r\n        <Formik\r\n          initialValues={{\r\n            name: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            cPassword: \"\",\r\n          }}\r\n          validationSchema={yup.object({\r\n            name: yup\r\n              .string()\r\n              .min(3, \"Name must have at least 3 characters.\")\r\n              .required(\"Name is required.\"),\r\n            email: yup\r\n              .string()\r\n              .email(\"Email must be a valid email.\")\r\n              .required(\"Email is required.\"),\r\n            password: yup\r\n              .string()\r\n              .min(8, \"Password must have at least 8 characters.\")\r\n              .required(\"Password is required.\"),\r\n            cPassword: yup\r\n              .string()\r\n              .min(8, \"Confirm password must have at least 8 characters.\")\r\n              .required(\"Confirm password is required.\")\r\n              .oneOf(\r\n                [yup.ref(\"password\"), null],\r\n                \"Password and Confirm Password must match.\"\r\n              ),\r\n          })}\r\n          onSubmit={(values, { resetForm }) => {\r\n            const { name, email, password } = values;\r\n\r\n            axiox\r\n              .post(`/api/v1/register`, { name, email, password })\r\n              .then((res) => {\r\n                if (res.status === 201) {\r\n                  toast.success(\"Registration Sucessfull.\");\r\n\r\n                  setTimeout(() => {\r\n                    navigate(\"/\");\r\n                    window.location.reload();\r\n                  }, 2000);\r\n                } else {\r\n                  toast.error(\"Registration failed.\");\r\n                }\r\n              })\r\n              .catch((err) => {\r\n                toast.error(\r\n                  err?.response?.data?.message || \"Registration failed.\"\r\n                );\r\n                console.error(err);\r\n              });\r\n          }}\r\n        >\r\n          <Form>\r\n            <TextInput\r\n              label=\"Name\"\r\n              type=\"name\"\r\n              name=\"name\"\r\n              placeholder=\"Enter Your Name\"\r\n            />\r\n            <TextInput\r\n              label=\"Email\"\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"Enter Your Email\"\r\n            />\r\n            <TextInput\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Enter your password\"\r\n            />\r\n            <TextInput\r\n              label=\"Confirm password\"\r\n              type=\"password\"\r\n              name=\"cPassword\"\r\n              placeholder=\"Enter confirm password\"\r\n            />\r\n\r\n            <Button type=\"submit\" text=\"Register\" />\r\n          </Form>\r\n        </Formik>\r\n\r\n        <Message>\r\n          <p>\r\n            By creating an account, you agree to DIGIMART's\r\n            <Link to={\"/conditions\"}> Conditions of Use </Link>and\r\n            <Link to={\"/privacy-policy\"}> Privacy Notice.</Link>\r\n          </p>\r\n        </Message>\r\n      </FormContainer>\r\n\r\n      <ButtonContainer>\r\n        <div>\r\n          <p>Already have an account?</p>\r\n          <Link to={\"/login\"}>Sign-In</Link>\r\n        </div>\r\n      </ButtonContainer>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Register;\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  max-width: 50rem;\r\n  margin: 5rem auto;\r\n  padding: 1rem;\r\n\r\n  @media screen and (max-width: 576px) {\r\n    margin: 2rem auto;\r\n  }\r\n`;\r\n\r\nconst FormContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  padding: 3rem;\r\n  box-shadow: var(--shadow-1);\r\n  border-radius: 5px;\r\n\r\n  form {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst Message = styled.div`\r\n  margin: 1rem 0;\r\n  p {\r\n    color: var(--text-secondary);\r\n\r\n    margin-bottom: 1rem;\r\n  }\r\n  a {\r\n    transition: all 0.3s ease-in-out;\r\n  }\r\n  a:hover {\r\n    color: tomato;\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  margin: 3rem;\r\n  width: 100%;\r\n  div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n\r\n    & p {\r\n      margin: 1rem 0;\r\n    }\r\n    & a {\r\n      text-align: center;\r\n      border: 1px solid var(--text-primary);\r\n      width: 100%;\r\n      border-radius: 3px;\r\n      padding: 1rem;\r\n      transition: all 0.3s ease-in-out;\r\n      &:hover {\r\n        box-shadow: rgba(0, 0, 0, 0.1) 0px -50px 36px -30px inset;\r\n        color: tomato;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { useField } from \"formik\";\nimport styled from \"styled-components\";\nimport ValidationError from \"../validationUtils/ValidationError\";\n\nconst TextInput = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input>. We can use field meta to show an error\n  // message if the field is invalid and it has been touched (i.e. visited)\n  const [field, meta] = useField(props);\n  return (\n    <InputGroup>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input {...field} {...props} />\n      {meta.touched && meta.error && <ValidationError message={meta.error} />}\n    </InputGroup>\n  );\n};\n\nexport default TextInput;\n\nconst InputGroup = styled.div`\n  width: 100%;\n  margin-bottom: 2rem;\n\n  label {\n    color: var(--text-secondary);\n    font-size: 1.3rem;\n  }\n  input {\n    background: #fff;\n    color: var(--text-primary);\n    width: 100%;\n    height: 4rem;\n    padding: 0 1rem;\n    margin-top: 0.5rem;\n    border: none;\n    outline: none;\n    font-size: 1.3rem;\n    border-radius: 2px;\n    box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px,\n      rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;\n    &:focus {\n      box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\n        rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;\n\n      color: #000;\n    }\n    &::placeholder {\n      font-size: 1.3rem;\n    }\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const Button = ({ text, children, ...rest }) => {\n  return (\n    <ButtonDefault {...rest}>\n      <span>{text}</span> {children}\n    </ButtonDefault>\n  );\n};\n\nexport default Button;\n\nconst ButtonDefault = styled.button`\n  border: none;\n  color: var(--text-primary);\n  background-color: tomato;\n  padding: 1rem 3rem;\n  font-size: 1.3rem;\n  font-weight: 500;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n\n  &:hover {\n    background-color: #dd5a43;\n    color: #f1f1f1;\n  }\n  &:disabled {\n    background-color: #dd5a43d3;\n    cursor: not-allowed;\n    color: var(--text-primary);\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Title = ({ variant = \"h1\", text, style }) => {\n  return (\n    <Container>\n      {variant === (\"h2\" || \"H2\") && <h2 style={style}>{text}</h2>}\n      {variant === (\"h3\" || \"H3\") && <h3 style={style}>{text}</h3>}\n      {variant === (\"h1\" || \"H1\") && <h1 style={style}>{text}</h1>}\n      {variant === (\"h4\" || \"H4\") && <h4 style={style}>{text}</h4>}\n    </Container>\n  );\n};\n\nexport default Title;\n\nconst Container = styled.div`\n  color: var(--text-primary);\n\n  h1 {\n    font-size: 2.4rem;\n  }\n\n  h2 {\n    font-size: 2rem;\n  }\n\n  h3 {\n    font-size: 1.8rem;\n  }\n\n  h4 {\n    font-size: 1.4rem;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ValidationError = ({ message }) => {\n  return (\n    <Container className=\"error\">\n      <span>i</span> {message}\n    </Container>\n  );\n};\n\nexport default ValidationError;\n\nconst Container = styled.div`\n  font-size: 1.1rem;\n  padding: 0.5rem 0;\n  span {\n    font-style: italic;\n    color: tomato;\n    margin-right: 0.3rem;\n    font-weight: 700;\n    font-size: 1.1rem;\n  }\n`;\n"],"names":["navigate","useNavigate","_jsxs","Container","children","FormContainer","_jsx","Title","text","Formik","initialValues","name","email","password","cPassword","validationSchema","yup","min","required","oneOf","onSubmit","values","_ref","resetForm","axiox","then","res","status","toast","success","setTimeout","window","location","reload","error","catch","err","_err$response","_err$response$data","response","data","message","console","Form","TextInput","label","type","placeholder","Button","Message","Link","to","ButtonContainer","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","props","_objectWithoutProperties","_excluded","_useField","useField","_useField2","_slicedToArray","field","meta","InputGroup","htmlFor","id","_objectSpread","touched","ValidationError","rest","ButtonDefault","button","_ref$variant","variant","style","className"],"sourceRoot":""}